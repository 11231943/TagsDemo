package org.wheat.test.collapsing.view;import android.content.Context;import android.content.res.TypedArray;import android.util.AttributeSet;import android.util.Log;import android.view.View;import android.view.ViewGroup;import org.wheat.test.collapsing.R;/** * Created by monster on 6/4/17. */public class TagsLayout extends ViewGroup {    private int childHorizontalSpace;    private int childVerticalSpace;    public TagsLayout(Context context, AttributeSet attrs) {        super(context, attrs);        TypedArray attrArray = context.obtainStyledAttributes(attrs, R.styleable.TagsLayout);        if (attrArray != null) {            childHorizontalSpace = attrArray.getDimensionPixelSize(R.styleable.TagsLayout_tagHorizontalSpace, 0);            childVerticalSpace = attrArray.getDimensionPixelSize(R.styleable.TagsLayout_tagVerticalSpace, 0);            attrArray.recycle();        }    }    public TagsLayout(Context context, AttributeSet attrs, int defStyleAttr) {        super(context, attrs, defStyleAttr);    }    @Override    protected LayoutParams generateDefaultLayoutParams() {        return new ViewGroup.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);    }    @Override    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        super.onMeasure(widthMeasureSpec, heightMeasureSpec);        // 获得它的父容器为它设置的测量模式和大小        int sizeWidth = MeasureSpec.getSize(widthMeasureSpec);        int sizeHeight = MeasureSpec.getSize(heightMeasureSpec);        int modeWidth = MeasureSpec.getMode(widthMeasureSpec);        int modeHeight = MeasureSpec.getMode(heightMeasureSpec);        Log.d("onMeasure", " sizeWidth = " + sizeWidth + " sizeHeight = " + sizeHeight + " modeWidth = " + modeWidth + " modeHeight = " + modeHeight);        // 如果是warp_content情况下，记录宽和高        int width = 0;        int height = 0;        /**         * 记录每一行的宽度，width不断取最大宽度         */        int lineWidth = 0;        /**         * 每一行的高度，累加至height         */        int lineHeight = 0;        int count = getChildCount();        int left = getPaddingLeft();        int top = getPaddingTop();        // 遍历每个子元素        for (int i = 0; i < count; i++) {            Log.d("onMeasure", " count = " + count + " i = " + i);            View child = getChildAt(i);            if (child.getVisibility() == GONE)                continue;            // 测量每一个child的宽和高            measureChild(child, widthMeasureSpec, heightMeasureSpec);            Log.d("onMeasure", " getMeasuredWidth = " + child.getMeasuredWidth() + " getMeasuredHeight = " + child.getMeasuredHeight());            // 得到child的lp            MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();            // 当前子空间实际占据的宽度            int childWidth = child.getMeasuredWidth() + childHorizontalSpace + lp.leftMargin + lp.rightMargin;            // 当前子空间实际占据的高度            int childHeight = child.getMeasuredHeight() + childVerticalSpace + lp.topMargin + lp.bottomMargin;            if (lineWidth + childWidth > sizeWidth - getPaddingLeft() - getPaddingRight()) {                //如果加入当前child，则超出最大宽度，则的到目前最大宽度给width，类加height 然后开启新行                Log.d("onMeasure", " child = " + child.getMeasuredWidth() + " lineWidth " + lineWidth);                width = Math.max(lineWidth, childWidth);// 取最大的                lineWidth = childWidth; // 重新开启新行，开始记录                // 叠加当前高度，                height += lineHeight;//                // 开启记录下一行的高度                lineHeight = childHeight;                child.setTag(new Location(left, top + height, childWidth + left - childHorizontalSpace, height + child.getMeasuredHeight() + top));            } else {                Log.d("onMeasure", " child = " + child.getMeasuredWidth() + " lineWidth " + lineWidth);                // 否则累加值lineWidth,lineHeight取最大高度                child.setTag(new Location(lineWidth + left, top + height, lineWidth + childWidth + left - childHorizontalSpace, top + height + child.getMeasuredHeight()));                lineWidth += childWidth;                lineHeight = Math.max(lineHeight, childHeight);            }        }        width = Math.max(width, lineWidth) + getPaddingLeft() + getPaddingRight();        height += lineHeight;        sizeHeight += getPaddingTop() + getPaddingBottom();        height += getPaddingTop() + getPaddingBottom();        setMeasuredDimension((modeWidth == MeasureSpec.EXACTLY) ? sizeWidth : width, (modeHeight == MeasureSpec.EXACTLY) ? sizeHeight : height);    }    @Override    protected void onLayout(boolean b, int j, int i1, int i2, int i3) {        int count = getChildCount();        for (int i = 0; i < count; i++) {            View child = getChildAt(i);            if (child.getVisibility() == GONE)                continue;            //获取每一个空间的位置 进行布局            Location location = (Location) child.getTag();            child.layout(location.left, location.top, location.right, location.bottom);        }    }    /**     * 记录子控件的坐标     */    public class Location {        public Location(int left, int top, int right, int bottom) {            this.left = left;            this.top = top;            this.right = right;            this.bottom = bottom;        }        public int left;        public int top;        public int right;        public int bottom;    }}